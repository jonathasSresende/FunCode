
// Definindo a pergunta e as op√ß√µes
const question = `Um rob√¥ quer ir at√© a Lua. Para isso, ele precisa dar pulos nos meteoros. Ele pode pular um meteoro por vez, e ele precisa dar 10 pulos para chegar √† Lua.

Pergunta:
Qual das op√ß√µes abaixo descreve a melhor maneira de fazer o rob√¥ dar 10 pulos?
`;
const options = [
    "Rob√¥ d√° 10 pulos de uma vez s√≥ e chega √† Lua.", // Op√ß√£o A
    "Rob√¥ d√° 1 pulo e depois volta para o in√≠cio, repetindo isso at√© que ele se canse.",  // Op√ß√£o B 
    "Rob√¥ d√° 1 pulo e depois para. Ele n√£o chega √† Lua.", // Op√ß√£o C
    "Rob√¥ d√° 1 pulo, depois d√° mais 1 pulo, e assim por diante, at√© dar 10 pulos."   // Op√ß√£o D (correta)
];

let score = 0; // Inicializa a pontua√ß√£o

// URL da API de recursos
const RECURSOS_API_URL = 'http://127.0.0.1:5000/recursos/';

// Obt√©m os dados do usu√°rio do sessionStorage
const usuarioData = JSON.parse(sessionStorage.getItem('usuario'));
let trilhaId = null;

if (usuarioData && usuarioData.user_id) {
    const id_usuario = usuarioData.user_id;

    // Faz o fetch para obter os dados de trilha e recurso do usu√°rio
    fetch(`http://127.0.0.1:5000/user_trilha_recurso/${id_usuario}`)
        .then(response => response.json())
        .then(data => {
            if (data.length > 0) {
                const trilhaRecurso = data[0];
                trilhaId = trilhaRecurso.trilha_id;

                // Atualiza os valores na interface
                document.querySelector("#coracao-count").textContent = trilhaRecurso.CORACAO;
                document.querySelector("#moeda-count").textContent = trilhaRecurso.MOEDA;
                document.querySelector("#diamante-count").textContent = trilhaRecurso.DIAMANTE;
            } else {
                console.error("Nenhum dado encontrado para o usu√°rio.");
            }
        })
        .catch(error => console.error("Erro ao obter trilha e recurso:", error));
} else {
    console.error("ID do usu√°rio n√£o encontrado no sessionStorage.");
}

// Fun√ß√£o para iniciar o jogo
function startGame() {
    document.getElementById("question").innerText = question;
    const optionsButtons = document.querySelectorAll(".option");
    optionsButtons.forEach((button, index) => {
        button.innerText = options[index];
    });
}

// Fun√ß√£o para verificar a resposta
function checkAnswer(selectedIndex) {
    const correctIndex = 1; // O √≠ndice da resposta correta (Op√ß√£o B)

    // L√≥gica para abrir o modal com a resposta
    const modal = document.getElementById("resultModal");
    const modalMessage = document.getElementById("modalMessage");
    const modalButtonContainer = document.getElementById("modalButtonContainer");

    // Limpa os bot√µes do modal antes de adicionar novos
    modalButtonContainer.innerHTML = '';

    if (selectedIndex === correctIndex) {
        score++;

        // Atualiza os recursos do usu√°rio ao acertar
        if (trilhaId) {
            atualizarRecursoAoAcertar(trilhaId);
        } else {
            console.error("Trilha ID n√£o encontrado.");
        }

        modalMessage.innerText = ` Voc√™ Acertou!
EXPLICA√á√ÉO:
Na programa√ß√£o, muitas vezes precisamos repetir uma a√ß√£o v√°rias vezes. Em vez de escrever o mesmo comando v√°rias vezes, usamos algo chamado la√ßo de repeti√ß√£o (ou loop). Ele faz a mesma coisa v√°rias vezes automaticamente!
O c√≥digo para o rob√¥ dar 10 pulos seria assim:
Robo = 0  Meteoros
Enquanto Robo < 10:  
         Robo + Pula 1 meteoro  
  
Robo CHEGOU na Lua! 
Aqui est√° o que acontece no c√≥digo:
Come√ßamos com o rob√¥ tendo feito 0 pulos.
Enquanto o rob√¥ n√£o tiver pulado 10 meteoros ele n√£o ir√° para de pular.A cada pulo, o rob√¥ pula 1 meteoro.Quando o rob√¥ chegar a 10 pulos, ele para e comemora na Lua! üöÄ
Usar la√ßos de repeti√ß√£o √© uma maneira mais r√°pida e inteligente de repetir coisas. Muito melhor do que escrever tudo v√°rias vezes, n√£o √©?

        `;

        // Bot√£o para voltar ao menu
        const backButton = document.createElement("button");
        backButton.innerText = "Voltar para o Menu";
        backButton.className = "btn btn-success";
        backButton.onclick = function() {
            window.location.href = "./menu.html";
        };
        modalButtonContainer.appendChild(backButton);
    } else {
        modalMessage.innerText = "Tente novamente!";

        // Bot√£o para reiniciar o jogo
        const restartButton = document.createElement("button");
        restartButton.innerText = "Reiniciar";
        restartButton.className = "btn btn-danger";
        restartButton.onclick = restartGame;
        modalButtonContainer.appendChild(restartButton);
    }

    // Exibe o modal
    modal.style.display = "flex";

    // Desabilita os bot√µes de op√ß√£o ap√≥s a resposta
    const optionsButtons = document.querySelectorAll(".option");
    optionsButtons.forEach(button => {
        button.disabled = true;
    });
}

// Fun√ß√£o para atualizar recursos ao acertar a quest√£o
function atualizarRecursoAoAcertar(trilhaId) {
    fetch(RECURSOS_API_URL + trilhaId, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            MOEDA: 10 // Adiciona 10 moedas ao usu√°rio
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log("Recurso atualizado com sucesso:", data);
        
        // Atualiza a interface ap√≥s a atualiza√ß√£o do recurso
        if (data.MOEDA !== undefined) {
            atualizarMoedas(data.MOEDA);
        }
    })
    .catch(error => console.error("Erro ao atualizar recurso:", error));
}

// Fun√ß√£o para atualizar a contagem de moedas na interface
function atualizarMoedas(novaQuantidade) {
    document.getElementById('moeda-count').innerText = novaQuantidade;
}

// Fun√ß√£o para reiniciar o jogo
function restartGame() {
    const modal = document.getElementById("resultModal");
    modal.style.display = "none"; // Fecha o modal

    // Limpa a mensagem de resultado
    const resultMessage = document.querySelector(".result-message");
    if (resultMessage) {
        resultMessage.remove();
    }

    // Habilita os bot√µes novamente
    const optionsButtons = document.querySelectorAll(".option");
    optionsButtons.forEach(button => {
        button.disabled = false;
    });

    // Reinicia a pontua√ß√£o e a pergunta
    score = 0;
    document.getElementById("score").innerText = "Pontua√ß√£o: " + score;
    startGame();
}

// Inicia o jogo ao carregar a p√°gina
window.onload = startGame;
